/*
 * Spring Boot使用 Swagger2 构建RestFul API
 * 接口文档
 *
 * OpenAPI spec version: v1
 * Contact: 123456@dongfangdi.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bidewu.api;

import com.bidewu.invoker.*;
import com.bidewu.model.*;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportHouseApi {
    private ApiClient apiClient;

    public ImportHouseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportHouseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for dropHouseRent
     * @param dropHouseRentDO dropHouseRentDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @param isDebug
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dropHouseRentCall(ApiDropHouseRentDO dropHouseRentDO, String authorization,
                                                      final ProgressResponseBody.ProgressListener progressListener,
                                                      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
                                                      boolean isDebug) throws ApiException {
        Object localVarPostBody = dropHouseRentDO;

        // create path and map variables
        String localVarPath = "/houseRent/dropHouseRent/v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
                localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames,
                progressRequestListener, isDebug);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dropHouseRentValidateBeforeCall(ApiDropHouseRentDO dropHouseRentDO, String authorization,
                                                                     final ProgressResponseBody.ProgressListener progressListener,
                                                                     final ProgressRequestBody.ProgressRequestListener progressRequestListener,
                                                                     boolean isDebug) throws ApiException {
        
        // verify the required parameter 'dropHouseRentDO' is set
        if (dropHouseRentDO == null) {
            throw new ApiException("Missing the required parameter 'dropHouseRentDO' when calling dropHouseRent(Async)");
        }
        

        com.squareup.okhttp.Call call = dropHouseRentCall(dropHouseRentDO, authorization, progressListener,
                progressRequestListener, isDebug);
        return call;

    }

    /**
     * 出租房源下架
     * 出租房源下架
     * @param dropHouseRentDO dropHouseRentDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @return HouseRentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HouseRentResponse dropHouseRent(ApiDropHouseRentDO dropHouseRentDO, String authorization, boolean isDebug)
            throws
            ApiException {
        ApiResponse<HouseRentResponse> resp = dropHouseRentWithHttpInfo(dropHouseRentDO, authorization, isDebug);
        return resp.getData();
    }

    /**
     * 出租房源下架
     * 出租房源下架
     * @param dropHouseRentDO dropHouseRentDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param isDebug
     * @return ApiResponse&lt;HouseRentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HouseRentResponse> dropHouseRentWithHttpInfo(ApiDropHouseRentDO dropHouseRentDO, String authorization, boolean isDebug) throws ApiException {
        com.squareup.okhttp.Call call = dropHouseRentValidateBeforeCall(dropHouseRentDO, authorization,
                null, null, isDebug);
        Type localVarReturnType = new TypeToken<HouseRentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 出租房源下架 (asynchronously)
     * 出租房源下架
     * @param dropHouseRentDO dropHouseRentDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dropHouseRentAsync(ApiDropHouseRentDO dropHouseRentDO, String authorization,
                                                       final ApiCallback<HouseRentResponse> callback, boolean isDebug) throws
            ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dropHouseRentValidateBeforeCall(dropHouseRentDO, authorization, progressListener, progressRequestListener, isDebug);
        Type localVarReturnType = new TypeToken<HouseRentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dropHouseSell
     * @param houseDropDO houseDropDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @param isDebug
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dropHouseSellCall(HouseDropDO houseDropDO, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, boolean isDebug) throws ApiException {
        Object localVarPostBody = houseDropDO;

        // create path and map variables
        String localVarPath = "/houseSell/dropHouseSell/v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener, isDebug);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dropHouseSellValidateBeforeCall(HouseDropDO houseDropDO, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, boolean isDebug) throws ApiException {
        
        // verify the required parameter 'houseDropDO' is set
        if (houseDropDO == null) {
            throw new ApiException("Missing the required parameter 'houseDropDO' when calling dropHouseSell(Async)");
        }
        

        com.squareup.okhttp.Call call = dropHouseSellCall(houseDropDO, authorization, progressListener,
                progressRequestListener, isDebug);
        return call;

    }

    /**
     * 出售房源下架
     * 出售房源下架
     * @param houseDropDO houseDropDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object dropHouseSell(HouseDropDO houseDropDO, String authorization, boolean isDebug) throws ApiException {
        ApiResponse<Object> resp = dropHouseSellWithHttpInfo(houseDropDO, authorization, isDebug);
        return resp.getData();
    }

    /**
     * 出售房源下架
     * 出售房源下架
     * @param houseDropDO houseDropDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param isDebug
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> dropHouseSellWithHttpInfo(HouseDropDO houseDropDO, String authorization, boolean isDebug) throws ApiException {
        com.squareup.okhttp.Call call = dropHouseSellValidateBeforeCall(houseDropDO, authorization, null, null, isDebug);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 出售房源下架 (asynchronously)
     * 出售房源下架
     * @param houseDropDO houseDropDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dropHouseSellAsync(HouseDropDO houseDropDO, String authorization, final
    ApiCallback<Object> callback, boolean isDebug) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dropHouseSellValidateBeforeCall(houseDropDO, authorization, progressListener, progressRequestListener, isDebug);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importHouseRent
     * @param apiHouseRentDO apiHouseRentDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importHouseRentCall(ApiHouseRentDO apiHouseRentDO, String authorization,
                                                        final ProgressResponseBody.ProgressListener progressListener,
                                                        final ProgressRequestBody.ProgressRequestListener progressRequestListener,
                                                        boolean isDebug) throws ApiException {
        Object localVarPostBody = apiHouseRentDO;

        // create path and map variables
        String localVarPath = "/houseRent/importOrUpdateHouse/v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener, isDebug);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importHouseRentValidateBeforeCall(ApiHouseRentDO apiHouseRentDO, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, boolean isDebug) throws ApiException {
        
        // verify the required parameter 'apiHouseRentDO' is set
        if (apiHouseRentDO == null) {
            throw new ApiException("Missing the required parameter 'apiHouseRentDO' when calling importHouseRent(Async)");
        }
        

        com.squareup.okhttp.Call call = importHouseRentCall(apiHouseRentDO, authorization, progressListener,
                progressRequestListener, isDebug);
        return call;

    }

    /**
     * 导入或更新出租房源
     * 导入或更新出租房源
     * @param apiHouseRentDO apiHouseRentDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @return HouseRentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HouseRentResponse importHouseRent(ApiHouseRentDO apiHouseRentDO, String authorization, boolean isDebug)
            throws
            ApiException {
        ApiResponse<HouseRentResponse> resp = importHouseRentWithHttpInfo(apiHouseRentDO, authorization, isDebug);
        return resp.getData();
    }

    /**
     * 导入或更新出租房源
     * 导入或更新出租房源
     * @param apiHouseRentDO apiHouseRentDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param isDebug
     * @return ApiResponse&lt;HouseRentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HouseRentResponse> importHouseRentWithHttpInfo(ApiHouseRentDO apiHouseRentDO, String authorization, boolean isDebug) throws ApiException {
        com.squareup.okhttp.Call call = importHouseRentValidateBeforeCall(apiHouseRentDO, authorization, null,
                null, isDebug);
        Type localVarReturnType = new TypeToken<HouseRentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 导入或更新出租房源 (asynchronously)
     * 导入或更新出租房源
     * @param apiHouseRentDO apiHouseRentDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importHouseRentAsync(ApiHouseRentDO apiHouseRentDO, String authorization, final
    ApiCallback<HouseRentResponse> callback, boolean isDebug) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importHouseRentValidateBeforeCall(apiHouseRentDO, authorization, progressListener, progressRequestListener, isDebug);
        Type localVarReturnType = new TypeToken<HouseRentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importHouseSell
     * @param houseImportDO houseImportDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @param isDebug
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importHouseSellCall(HouseImportDO houseImportDO, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, boolean isDebug) throws ApiException {
        Object localVarPostBody = houseImportDO;

        // create path and map variables
        String localVarPath = "/houseSell/importOrUpdateHouse/v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener, isDebug);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importHouseSellValidateBeforeCall(HouseImportDO houseImportDO, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, boolean isDebug) throws ApiException {
        
        // verify the required parameter 'houseImportDO' is set
        if (houseImportDO == null) {
            throw new ApiException("Missing the required parameter 'houseImportDO' when calling importHouseSell(Async)");
        }
        

        com.squareup.okhttp.Call call = importHouseSellCall(houseImportDO, authorization, progressListener,
                progressRequestListener, isDebug);
        return call;

    }

    /**
     * 导入或更新出售房源
     * 导入或更新出售房源
     * @param houseImportDO houseImportDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @return TouTiaoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TouTiaoResult importHouseSell(HouseImportDO houseImportDO, String authorization, boolean isDebug) throws
            ApiException {
        ApiResponse<TouTiaoResult> resp = importHouseSellWithHttpInfo(houseImportDO, authorization, isDebug);
        return resp.getData();
    }

    /**
     * 导入或更新出售房源
     * 导入或更新出售房源
     * @param houseImportDO houseImportDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param isDebug
     * @return ApiResponse&lt;TouTiaoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TouTiaoResult> importHouseSellWithHttpInfo(HouseImportDO houseImportDO, String authorization, boolean isDebug) throws ApiException {
        com.squareup.okhttp.Call call = importHouseSellValidateBeforeCall(houseImportDO, authorization, null, null, isDebug);
        Type localVarReturnType = new TypeToken<TouTiaoResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 导入或更新出售房源 (asynchronously)
     * 导入或更新出售房源
     * @param houseImportDO houseImportDO (required)
     * @param authorization 标志 (optional, default to a139963e290b0d1954acd3cc30ef49177628b4b7)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importHouseSellAsync(HouseImportDO houseImportDO, String authorization, final
    ApiCallback<TouTiaoResult> callback, boolean isDebug) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importHouseSellValidateBeforeCall(houseImportDO, authorization, progressListener, progressRequestListener, isDebug);
        Type localVarReturnType = new TypeToken<TouTiaoResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
